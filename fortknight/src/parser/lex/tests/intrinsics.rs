use crate::parser::lex::token::KeywordTokenKind;

#[test]
fn check_intrinsic_types() {
    use KeywordTokenKind::*;

    let intrinsic_types = [
        Real,
        Double,
        Precision,
        DoublePrecision,
        Complex,
        Character,
        Logical,
        Integer,
    ];

    for t in &intrinsic_types {
        assert!(t.is_intrinsic_type());
    }

    let non_intrinsic_types = KeywordTokenKind::all().filter(|k| !intrinsic_types.contains(k));

    for t in non_intrinsic_types {
        assert!(!t.is_intrinsic_type());
    }
}

#[test]
fn check_intrinsic_routines() {
    use KeywordTokenKind::*;

    let intrinsic_procedures = [
        Abs,
        Achar,
        Acos,
        Acosh,
        Adjustl,
        Adjustr,
        Aimag,
        Aint,
        All,
        Allocated,
        Anint,
        Any,
        Asin,
        Asinh,
        Associated,
        Atan,
        Atan2,
        Atanh,
        Atomic_Add,
        Atomic_And,
        Atomic_Cas,
        Atomic_Define,
        Atomic_Fetch_Add,
        Atomic_Fetch_And,
        Atomic_Fetch_Or,
        Atomic_Fetch_Xor,
        Atomic_Or,
        Atomic_Ref,
        Atomic_Xor,
        Bessel_J0,
        Bessel_J1,
        Bessel_JN,
        Bessel_Y0,
        Bessel_Y1,
        Bessel_YN,
        BGE,
        BGT,
        BIT_SIZE,
        BLE,
        BLT,
        Btest,
        Ceiling,
        Char,
        Cmplx,
        Co_Broadcast,
        Co_Max,
        Co_Min,
        Co_Reduce,
        Co_Sum,
        Command_Argument_Count,
        Conjg,
        Cos,
        Cosh,
        Coshape,
        Count,
        Cpu_Time,
        Cshift,
        Date_And_Time,
        Dble,
        Digits,
        Dim,
        Dot_Product,
        Dprod,
        Dshiftl,
        Dshiftr,
        Eoshift,
        Epsilon,
        Erf,
        Erfc,
        Erfc_Scaled,
        Event_Query,
        Execute_Command_Line,
        Exp,
        Exponent,
        Extends_Type_Of,
        Failed_Images,
        Findloc,
        Floor,
        Fraction,
        Gamma,
        Get_Command,
        Get_Command_Argument,
        Get_Environment_Variable,
        Get_Team,
        Huge,
        Hypot,
        Iachar,
        Iall,
        Iand,
        Iany,
        Ibclr,
        Ibits,
        Ibset,
        Ichar,
        Ieor,
        Image_Index,
        Image_Status,
        Index,
        Int,
        Ior,
        Iparity,
        Ishft,
        Ishftc,
        Is_Contiguous,
        Is_Iostat_End,
        Is_Iostat_Eor,
        Kind,
        Lbound,
        Lcobound,
        Leadz,
        Len,
        Len_Trim,
        LGE,
        LGT,
        LLE,
        LLT,
        Log,
        Log_Gamma,
        Log10,
        Logical,
        Maskl,
        Maskr,
        Matmul,
        Max,
        Maxexponent,
        Maxloc,
        Maxval,
        Merge,
        Merge_Bits,
        Min,
        Minexponent,
        Minloc,
        Minval,
        Mod,
        Modulo,
        Move_Alloc,
        Mvbits,
        Nearest,
        New_Line,
        Nint,
        Norm2,
        Not,
        Null,
        Num_Images,
        Out_Of_Range,
        Pack,
        Parity,
        Popcnt,
        Poppar,
        Precision,
        Present,
        Product,
        Radix,
        Random_Init,
        Random_Number,
        Random_Seed,
        Range,
        Rank,
        Real,
        Reduce,
        Repeat,
        Reshape,
        Rrspacing,
        Same_Type_As,
        Scale,
        Scan,
        Selected_Char_Kind,
        Selected_Int_Kind,
        Selected_Real_Kind,
        Set_Exponent,
        Shape,
        Shifta,
        Shiftl,
        Shiftr,
        Sign,
        Sin,
        Sinh,
        Size,
        Spacing,
        Spread,
        Sqrt,
        Stopped_Images,
        Storage_Size,
        Sum,
        System_Clock,
        Tan,
        Tanh,
        Team_Number,
        This_Image,
        Tiny,
        Trailz,
        Transfer,
        Transpose,
        Trim,
        Ubound,
        Ucobound,
        Unpack,
        Verify,
    ];

    for t in intrinsic_procedures.iter() {
        assert!(t.is_intrinsic_procedure());
    }

    let non_intrinsic_procedures =
        KeywordTokenKind::all().filter(|k| !intrinsic_procedures.contains(k));

    for t in non_intrinsic_procedures {
        assert!(!t.is_intrinsic_procedure(), "Kind: {:?}", t);
    }
}
